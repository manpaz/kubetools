#!/bin/bash

# kubeconfig
#	Setup the proper config file for kubernetes
#
#	Manuel F Martinez <manpaz@bashlinux.com>
#	Bashlinux

# GLOBALS =====================================================================
KUBE_DIR="${HOME}/.kube"

# Get list of configs
CLUSTERS=($(ls ${KUBE_DIR}/config.* | sed 's/^.*config\.//' ))

# Get user preferences
[[ -f ${KUBE_DIR}/prefs ]] && . ${KUBE_DIR}/prefs

# FUNCTIONS ===================================================================
# Show configs
show_configs() {
	# Is already there a config file?
	if [ -L ${KUBE_DIR}/config ]; then
		# Symlink is pointing to the current cluster
		CURRENT=$(ls -l ${KUBE_DIR}/config | sed 's/^.*config\.//')
	else
		# No symlink for config was found
		CURRENT="none"
	fi

	# List clusters
	echo "The available kubernetes clusters are:"
	for CLUSTER in "${CLUSTERS[@]}"; do
		if [ "${CLUSTER}" == "${CURRENT}" ]; then
			echo -e "\t * ${CLUSTER} [ Currently Selected ]"
		else
			echo -e "\t * ${CLUSTER}"
		fi
	done

	# Get namespace
	NAMESPACE=$(kubectl config get-contexts --no-headers | sed 's/^.* //')
	echo
	echo "Namespace: ${NAMESPACE}"
	exit
}

# MAIN ========================================================================

# Return list of configs
if [ -z ${1} ]; then
	show_configs
fi

# Check if a config file exists
CLUSTER_NAME=""
for CLUSTER in "${CLUSTERS[@]}"; do
	if [ "${CLUSTER}" == "${1}" ]; then
		CLUSTER_NAME=${1}
	fi
done

# Exit if no cluster is found
if [ ${CLUSTER_NAME} == "" ]; then
	show_configs
fi

# Set config file
[[ -L ${KUBE_DIR}/config ]] && rm -f ${KUBE_DIR}/config
ln -s ${KUBE_DIR}/config.${CLUSTER_NAME} ${KUBE_DIR}/config

# Set namespace
NAMESPACE=$(kubectl get ns --no-headers | grep $(echo ${CLUSTER_NAME} | cut -d'-' -f1) | tail -n1 | awk '{print $1}')
echo "switching to ${NAMESPACE}"
kubectl config set-context --current --namespace=${NAMESPACE} >> /dev/null

# Show ending result
show_configs
